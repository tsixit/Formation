Prerequis:
	-	ssh ok
	-	clé publique déployé dans /root/.ssh/authorized_keys


ansible -i  "node1," -m ping -u root all 

ansible -i  inventory  -m ping -u root all
	invotory = fichier contenant une liste de machine

ansible.cfg = permet de stocker des varaiables ( fichier inventaire, user, ..)
ansible -m ping all 

ansible -m command -a "ls -ltr /tmp" all 
	module command : module par défaut , permet d'exécuter des commandes unix dans les noeud
	-a = permet d'ajouter un argument au module
	ansible -a "uname -r " all
	ce module ne permet pas de faire des rediretions, des pipes

module shell : permet d'aller audela de la limite du module "command"
	ansible -m user -a "name=gilles shell=/bin/bash home=/home/gilles" all

module file : permet de vérifier la permission et la presence d'un fichier
	ansible -m file -a "path=/tmp/toto state=file" all

module copy : permet d'ajouter du contenu dans un fichier e garantir la conformité
	ansible -m copy -a "dest=/tmp/dawn content=coucou" all

module user = permet de vérifier si l'user existe bien

ansible-doc <module> = document sur un module
ansible-doc -l = liste des modules

module apt : piloter le gestionnaire de paquet debian "apt"
	ansible -m apt -a "name=tmux state=present" all
	ansible -m apt -a "name=tmux state=absent" all

ansible-playbook : permet de jouer les playbook
	ansible-playbook --syntax-check webserver.yml : vérifie la syntaxe yaml
	ansible-playbook --list-tasks webserver.yml : afficher les tasks
	ansible-playbook --check webserver.yml  : vérifier sans appliquer le playbook
	ansible-playbook --check --diff webserver.yml : vérifie et voir ce qu'il va modifier
	ansible-playbook -v --step  webserver.yml : lancer pas à pas 
	ansible-playbook --list-hosts --list-tasks webserver.yml
	ansible-playbook  webserver.yml -l 'node1' : restreinte l'exécution sur une machine de la liste ou groupe
	ansible-playbook  webserver.yml -l '!node1' : tout sauf une machine, ici node1
	ansible-playbook bootstrap.yml -l node3 -k : -k permet de se connecter avec le mot de passe. cela necessite l'installation de sshpass sur la machine pilote.utile pour la première connexion  au serveur. Mais avant il faut récuperer la clé publique du serveur.
	ansible-playbook bootstrap.yml --start-at-task "nom du task" : permet de démarrer le playbook au task indiqué
	ansible-playbook -e message=toto bootstrap.yml : -e permet d'affecter une valeur à une variable

ansible -m fetch

Ansible lance les actions en parallèle par bloc de 10 machine par défaut

ansible --list-hosts webservers : permet de savoir la liste des machines dans un groupe donnée

Il est possible d'appliquer aussi le play-book sur le host local
	ansible-playbook -i 'localhost' --connection=local bootstrap.yml (il exécute le code python directement en local)

auges : module permet de modifier une partie d'un fichier de configuration, pour l'instant il n'est pas intégré 



handler : une tache qui va être appeler par une autre tache seulement quand cette dernière a efféctuer un changement

jinja2 : moteur de templating, utile pour l'utilisation des variables
	on peut ajouter des filtes; dans le cas d'une variable cela permet d'avoir une valeur par défaut de la valeur dans le cas où celle-ci n'est pas définie
	exe: content: {{ message | default('Coucou ! ') }}
	si message est absent, c'est la valeur de defaut qui sera utilisé.

	Pourt récuperer la valeur d'une clé dans une dictionnaire :
    Ex: pour récuper lavaleur de l'adresse IP , 
    on fait ansible_default_ipv4.address dans le playbook
	node1 | SUCCESS => {
    "ansible_facts": {
        "ansible_default_ipv4": {
            "address": "192.168.75.27", 
            "alias": "enp0s3", 
            "broadcast": "192.168.75.255", 
            "gateway": "192.168.75.1", 
            "interface": "enp0s3", 
            "macaddress": "08:00:27:55:8d:3a", 
            "mtu": 1500, 
            "netmask": "255.255.255.0", 
            "network": "192.168.75.0", 
            "type": "ether"
        }
    }, 
    "changed": false
}
	ansible_default_ipv4.address

On peut ajouter une variable à une machine de l'inventaire .
La declaration d'une variables dans le playbook et en meme temps dans l'inventaire masque la valeur de la variable défini dans le playbook.
Donc pour faire, on supprime la déclaration de la variable dans le playbook, on ajoute un filtre jinja2 pour une valeur par defaut, ensuite on définit la valeur voulu dans l'inventaire.

ansible -m setup <all|liste machine>: ce module permet de récupéer des informations sur le host(os,fs,système,user,...).
ansible -m setup -a "filter=ansible_os_family" : permet de faire un filtre
ansible -m setup -o -a "filter=<filtre>" : permet de faire un filtre : afficher sur une seule ligne

ansible_default_ipv4.address: permet de récuper la valeur d'un disctionnaire

le module "package" permet de gérer automatiquement le gestionnaire de paquet en fonction de la distribution (apt, yum)

Le module "debug" avec l'argument "var" permet d'afficher la valeur d'une variable

La module authorized_key permet de gérer les clé publique.
La fontion lookup('file', 'key/mykey.pub' permet de récuper la clé dans un fichier.Ici dans key/mykey.pub


Il est possible d'exécuter uniquement certaine tache dans le playbook moyennant d'une tag sur les taches.
Cela se fait en ajoutant "tags" qui comprend une liste
	ansible-playbook --tags dns bootstrap.yml
	le tags ici est dns, visible dans le playbook

Le module template permet de récuperer  le contenu d'un fichier au format jinja2 au lieu de mettre directement dans le playbook.

Le module import_tasks: permet d'importer des taches qui se trouve dans un autre fichier

Le module with_items est un paramètre de tache qui permet de faire une boucle. ex installation de plusieurs paquets:
	package:
        name: "{{ item }}"
        state: present
      with_items:
        - openssh-server
        - sudo
        - tmux
        - vim
        - bash-completion

     Il est possible de mettre dans une variable cette liste, et l'appeler après
   vars:
    bootstrap_package:
      - openssh-server
      - sudo
      - tmux
      - vim
      - bash-completion

    package:
        name: "{{ item }}"
        state: present
    with_items:"{{bootstrap_package}}"

Le module set_fact permet de récuperer la valeur d'une variable déclarer uniquement à  un noeud ou à un ensemble de noeud

Le module include_vars permet d'inclure des variables contenu dans un fichier
include_vars: "{{ item }}"

Le with_first_found permet de chercher d'inclure les fichiers
    with_first_found:
      - webservers_{{ ansible_os_family | lower}}_vars.yml
      - webservers_default_vars